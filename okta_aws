#!/usr/bin/env python3
#
# Copyright 2017 Chef Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import base64
import getpass
import json
import html
import http
import logging
import os
import re
import subprocess
import sys
import xml.etree.ElementTree as ET

import requests
import toml

# Renew credentials early
grace_period = 600


class OktaAWS(object):
    def __init__(self, args):
        self.args = args
        if self.args.debug:
            logging.basicConfig(
                format='%(asctime)s %(levelname)s %(message)s',
                level=logging.DEBUG)
        else:
            logging.basicConfig(format='%(message)s', level=logging.INFO)
        self.config = self.load_config(args.config_file, args.profile)

    def load_config(self, config_file, profile):
        fh = open(os.path.expanduser(config_file))
        toml_config = toml.loads(fh.read())
        fh.close()

        toml_config.setdefault('general', {})

        try:
            config = dict(toml_config['general'], **toml_config[profile])
        except KeyError:
            logging.error("Unable to find profile %s in config file" % profile)
            sys.exit(1)

        required_config_options = [
            'username',
            'okta_server',
            'embed_url'
        ]

        missing_options = [k for k in required_config_options
                           if k not in config]
        if missing_options:
            logging.error("Missing required configuration settings: %s" %
                          ', '.join(missing_options))
            sys.exit(1)

        # Default configuration values
        config.setdefault('cookie_file', '~/.okta_aws_cookie')

        return config

    def get_arns(self, saml_assertion):
        parsed = ET.fromstring(base64.b64decode(saml_assertion))
        # Horrible xpath expression to dig into the ARNs
        elems = parsed.findall(
            ".//{urn:oasis:names:tc:SAML:2.0:assertion}Attribute["
            "@Name='https://aws.amazon.com/SAML/Attributes/Role']//*")
        # text contains Principal ARN, Role ARN separated by a comma
        roles = [e.text.split(",", 1) for e in elems]
        if len(roles) > 1:
            # We have multiple possible roles, ask the user to select one
            print("Available roles")
            for idx, role in enumerate(roles):
                print("%2d) %s" % (idx + 1, roles[idx][1].split('/')[-1]))
            response = 0
            while response < 1 or response > len(roles):
                try:
                    response = int(input("Select role to log in with: "))
                except ValueError:
                    # If we enter something invalid, just go through the loop
                    # again.
                    pass
            selected = roles[response - 1]
        else:
            selected = roles[0]
        # Returns principal_arn, role_arn
        logging.debug("Principal ARN: %s" % selected[0])
        logging.debug("Role ARN: %s" % selected[1])
        return selected

    def aws_assume_role(self, principal_arn, role_arn, assertion):
        # Get credentials from aws
        try:
            output = subprocess.check_output([
                "aws", "sts", "assume-role-with-saml",
                "--role-arn", role_arn,
                "--principal-arn", principal_arn,
                "--saml-assertion", assertion])
        except OSError as e:
            if e.errno == 2:
                logging.error(
                    "The AWS CLI cannot be found, see: http://docs.aws"
                    ".amazon.com/cli/latest/userguide/installing.html")
                logging.error("If you are on a mac with homebrew, run "
                              "`brew install awscli`")
                sys.exit(1)
            raise
        aws_creds = json.loads(output)
        return aws_creds['Credentials']

    def set_aws_config(self, profile, key, value):
        subprocess.call(["aws", "configure", "set",
                         "profile.%s.%s" % (profile, key), value])

    def store_aws_creds_in_profile(self, profile, aws_creds):
        self.set_aws_config(profile, "aws_access_key_id",
                            aws_creds['AccessKeyId'])
        self.set_aws_config(profile, "aws_secret_access_key",
                            aws_creds['SecretAccessKey'])
        self.set_aws_config(profile, "aws_session_token",
                            aws_creds['SessionToken'])

    def log_in_to_okta(self, password):
        r = requests.post(
            "https://%s/api/v1/authn" % self.config['okta_server'],
            json={"username": self.config['username'], "password": password})
        if r.status_code != 200:
            logging.debug(r.text)
            return None
        return r.json()['sessionToken']

    def get_saml_assertion(self, sessiontoken=None):
        cookie_path = os.path.expanduser(self.config['cookie_path'])
        s = requests.Session()
        # Use a cookiejar implementation that we can save to a file with
        s.cookies = http.cookiejar.LWPCookieJar(cookie_path)
        if os.path.exists(cookie_path):
            s.cookies.load(ignore_discard=True)

        logging.debug(s.cookies)

        if sessiontoken is not None:
            r = s.post("%s?sessionToken=%s" % (
                self.config['embed_url'], sessiontoken))
        else:
            r = s.post(self.config['embed_url'])

        if r.status_code != 200:
            logging.error("Error getting saml assertion. HTML response %s" %
                          r.status_code)
            return None

        match = re.search(r'<input name="SAMLResponse".*value="([^"]*)"',
                          r.text)

        if not match:
            return None

        s.cookies.save(ignore_discard=True)
        return html.unescape(match.group(1))

    def run(self):
        # Try to get the saml assertion with save cookies first
        logging.debug("Trying to get SAML assertion with pre-existing session")
        saml_assertion = self.get_saml_assertion()
        # If it fails, then get the username and re-get the saml assertion
        if saml_assertion is None:
            print("Okta Username:", self.config['username'])
            password = ""
            while password == "":
                password = getpass.getpass("Okta Password: ")
            sys.stdout.flush()

            onetimetoken = self.log_in_to_okta(password)
            if onetimetoken is None:
                logging.error("Error logging into okta.")
                sys.exit(1)

            saml_assertion = self.get_saml_assertion(onetimetoken)
            if saml_assertion is None:
                logging.error("Problem getting SAML assertion")
                sys.exit(1)

        principal_arn, role_arn = self.get_arns(saml_assertion)

        logging.info("Assuming AWS role %s..." % role_arn.split("/")[-1])
        aws_creds = self.aws_assume_role(principal_arn, role_arn,
                                         saml_assertion)
        self.store_aws_creds_in_profile(self.args.profile, aws_creds)
        logging.info("Temporary credentials stored in profile %s" %
                     self.args.profile)
        logging.info("Credentials expire in 1 hour")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Generates temporary AWS credentials for an AWS account'
        'you access through okta.')
    parser.add_argument('profile', nargs='?',
                        default=os.getenv("AWS_PROFILE") or "default",
                        help='The AWS profile you want credentials for')
    parser.add_argument('--debug', '-d', action='store_true')
    parser.add_argumnet('--config', '-c', default='~/.okta_aws.toml',
                        help='Path to the configuration file')
    args = parser.parse_args()

    oa = OktaAWS(args)
    try:
        oa.run()
    except KeyboardInterrupt:
        print("Exiting...")
