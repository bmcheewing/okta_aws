#!/usr/bin/env python3
#
# Copyright 2017 Chef Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import base64
import datetime
import getpass
import json
import html
import os
import re
import subprocess
import sys
import time
import xml.etree.ElementTree as ET

import requests
import toml

# Renew credentials early
grace_period = 600

class OktaAWS(object):
    def __init__(self, profile):
        self.profile = profile
        self.config = self.load_config(profile)
        self.okta = None

    def load_config(self, profile):
        fh = open(os.path.expanduser("~/.okta_aws.toml"))
        toml_config = toml.loads(fh.read())
        fh.close()

        toml_config.setdefault('general', {})

        try:
            config = dict(toml_config['general'], **toml_config[profile])
        except KeyError:
            print("Unable to find profile %s in config file" % profile)
            sys.exit(1)

        required_config_options = [
            'username',
            'okta_server',
            'embed_url'
        ]

        missing_options = [k for k in required_config_options if k not in config]
        if missing_options:
            print("Missing required configuration settings: %s" %
                  ', '.join(missing_options))
            sys.exit(1)
        return config

    def get_arns(self, saml_assertion):
        parsed = ET.fromstring(base64.b64decode(saml_assertion))
        # Horrible xpath expression to dig into the ARNs
        elems = parsed.findall(".//{urn:oasis:names:tc:SAML:2.0:assertion}Attribute[@Name='https://aws.amazon.com/SAML/Attributes/Role']//*")
        # text contains Principal ARN, Role ARN separated by a comma
        roles = [e.text.split(",", 1) for e in elems]
        if len(roles) > 1:
            # We have multiple possible roles, ask the user to select one
            print("Available roles")
            for idx, role in enumerate(roles):
                print ("%2d) %s" % (idx + 1, roles[idx][1].split('/')[-1]))
            response = 0
            while response < 1 or response > len(roles):
                try:
                    response = int(input("Select role to log in with: "))
                except ValueError:
                    # If we enter something invalid, just go through the loop
                    # again.
                    pass
            selected = roles[response - 1]
        else:
            selected = roles[0]
        # Returns principal_arn, role_arn
        return selected

    def aws_assume_role(self, principal_arn, role_arn, assertion):
        # Get credentials from aws
        try:
            output = subprocess.check_output([
                "aws", "sts", "assume-role-with-saml",
                "--role-arn", role_arn,
                "--principal-arn", principal_arn,
                "--saml-assertion", assertion])
        except OSError as e:
            if e.errno == 2:
                print("The AWS CLI cannot be found, see: http://docs.aws"
                      ".amazon.com/cli/latest/userguide/installing.html")
                print("If you are on a mac with homebrew, run "
                      "`brew install awscli`")
                sys.exit(1)
            raise
        aws_creds = json.loads(output)
        return aws_creds['Credentials']

    def set_aws_config(self, profile, key, value):
        subprocess.call(["aws", "configure", "set",
                         "profile.%s.%s" % (profile, key), value])

    def store_aws_creds_in_profile(self, profile, aws_creds):
        self.set_aws_config(profile, "aws_access_key_id",
                            aws_creds['AccessKeyId'])
        self.set_aws_config(profile, "aws_secret_access_key",
                       aws_creds['SecretAccessKey'])
        self.set_aws_config(profile, "aws_session_token",
                            aws_creds['SessionToken'])

    def run(self):
        print("Okta Username:", self.config['username'])
        password = ""
        while password == "":
            password = getpass.getpass("Okta Password: ")
        r1 = requests.post(
            "https://%s/api/v1/authn" % self.config['okta_server'],
            json={"username": self.config['username'], "password": password})
        if r1.status_code != 200:
            print("Error logging into okta. Exiting...")
            print("Output: " % r1.text)
            sys.exit(1)

        print("Getting SAML assertion from okta...")
        sys.stdout.flush()
        r2 = requests.post("%s?onetimetoken=%s" % (
            self.config['embed_url'], r1.json()['sessionToken']))
        if r2.status_code != 200:
            print("Error getting saml assertion. HTML response %s" %
                  r2.status_code)
            sys.exit(1)
        match = re.search(r'<input name="SAMLResponse".*value="([^"]*)"',
                          r2.text)
        if not match:
            print("Authentication failed")
            print(r2.text)
            sys.exit(1)

        saml_assertion = html.unescape(match.group(1))

        principal_arn, role_arn = self.get_arns(saml_assertion)

        print("Assuming AWS role %s..." % role_arn.split("/")[-1])
        aws_creds = self.aws_assume_role(principal_arn, role_arn,
                                         saml_assertion)
        self.store_aws_creds_in_profile(self.profile, aws_creds)
        print("Temporary credentials stored in profile", self.profile)
        print("Credentials expire in 1 hour")

def usage():
    print("Usage:", sys.argv[0], "[AWSPROFILE]")
    print("Generates temporary AWS credentials for an AWS account you access")
    print("through okta. If you don't specify a profile name, then the")
    print("profile 'default' is used.")
    sys.exit(0)

if __name__ == "__main__":
    if '--help' in sys.argv:
        usage()
    try:
        profile = sys.argv[1]
    except IndexError:
        profile = os.getenv("AWS_PROFILE") or "default"

    oa = OktaAWS(profile)
    oa.run()
