#!/usr/bin/env python
from __future__ import print_function

import base64
import datetime
import getpass
import json
import os
import subprocess
import sys
import time

import toml
from oktaauth import models

# Renew credentials early
grace_period = 600

def load_config(profile):
    fh = open(os.path.expanduser("~/.okta_aws.toml"))
    toml_config = toml.loads(fh.read())
    fh.close()

    toml_config.setdefault('general', {})

    try:
        config = dict(toml_config['general'], **toml_config[profile])
    except KeyError:
        print("Unable to find profile %s in config file" % profile)
        sys.exit(1)

    required_config_options = [
        'username',
        'okta_server',
        'apptype',
        'appid',
        'principal_arn',
        'role_arn'
    ]

    missing_options = [k for k in required_config_options if k not in config]
    if missing_options:
        print("Missing required configuration settings: %s" %
              ', '.join(missing_options))
        sys.exit(1)
    return config

def prompt_for_password(config):
    print("Okta Username:", config['username'])
    password = getpass.getpass("Okta Password: ")

    # TODO - deal with MFA as needed
    passcode = ""

    return {
        "password": password,
        "passcode": passcode
    }

def get_saml_assertion(config, creds):
    # Get SAML assertion
    okta = models.OktaSamlAuth(config['okta_server'],
                               config['apptype'], config['appid'],
                               config['username'], creds['password'],
                               creds['passcode'])
    assertion = okta.auth()

    if not assertion:
        print("Authentication failed")

    return assertion

def aws_assume_role(config, assertion):
    # Get credentials from aws
    output = subprocess.check_output([
        "aws", "sts", "assume-role-with-saml",
        "--role-arn", config['role_arn'],
        "--principal-arn", config['principal_arn'],
        "--saml-assertion", base64.b64encode(assertion)])
    aws_creds = json.loads(output)
    return aws_creds['Credentials']

def set_aws_config(profile, key, value):
    subprocess.call(["aws", "configure", "set",
                     "profile.%s.%s" % (profile, key), value])

def store_aws_creds_in_profile(profile, aws_creds):
    set_aws_config(profile, "aws_access_key_id", aws_creds['AccessKeyId'])
    set_aws_config(profile, "aws_secret_access_key",
                   aws_creds['SecretAccessKey'])
    set_aws_config(profile, "aws_session_token", aws_creds['SessionToken'])


def calculate_expiration(aws_creds):
    expiration = datetime.datetime.strptime(aws_creds['Expiration'],
                                            "%Y-%m-%dT%H:%M:%SZ")
    now = datetime.datetime.utcnow()
    expiration_delta = expiration - now
    # Round down to second boundary (don't include fractions of a second).
    # This makes printing how much time is left a bit neater.
    expiration_delta = datetime.timedelta(
        seconds=int(expiration_delta.total_seconds()))
    return expiration_delta

if __name__ == "__main__":
    try:
        profile = sys.argv[1]
    except IndexError:
        profile = "default"

    config = load_config(profile)
    creds = prompt_for_password(config)
    while True:
        print("Logging into okta...", end=' ')
        assertion = get_saml_assertion(config, creds)
        if not assertion:
            print("Authentication failed")
            sys.exit(1)
        print("done")
        print("Assuming AWS role...", end=' ')
        aws_creds = aws_assume_role(config, assertion)
        print("done")
        store_aws_creds_in_profile(profile, aws_creds)
        print("Temporary credentials stored in profile", profile)
        expiration_delta = calculate_expiration(aws_creds)
        while expiration_delta.total_seconds() > grace_period:
            print("\rCredentials expire in:", str(expiration_delta), end='')
            sys.stdout.flush()
            time.sleep(1)
            expiration_delta = calculate_expiration(aws_creds)
        print()
        print("Renewing credentials")
